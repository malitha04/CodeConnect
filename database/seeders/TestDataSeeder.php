<?php

namespace Database\Seeders;

use App\Models\Payment;
use App\Models\Project;
use App\Models\User;
use Illuminate\Database\Seeder;
use Illuminate\Support\Str;
use Illuminate\Support\Facades\Hash;
use Carbon\Carbon;

class TestDataSeeder extends Seeder
{
    public function run(): void
    {
        // Try to use Spatie roles if available; otherwise fall back to generic users
        $clients = collect();
        $developers = collect();

        $spatieAvailable = class_exists(\Spatie\Permission\Models\Role::class);
        if ($spatieAvailable) {
            try {
                $clients = User::role('Client')->get();
                $developers = User::role('Developer')->get();
            } catch (\Throwable $e) {
                // fall back below
                $spatieAvailable = false;
            }
        }

        if (!$spatieAvailable) {
            $this->command?->warn('Spatie roles not detected. Falling back to generic users.');
            $all = User::query()->latest()->get();
            if ($all->count() < 2) {
                $this->command?->error('Not enough users to create test data. Please register at least two users.');
                return;
            }
            // Use first 3 as clients, next 3 as developers (overlap allowed if not enough)
            $clients = $all->take(3);
            $developers = $all->slice(3, 3);
            if ($developers->isEmpty()) {
                // if not enough, reuse some users as developers
                $developers = $all->take(3);
            }
        }

        $statuses = ['open', 'in_progress', 'review', 'completed'];

        // For each of up to 3 clients, create projects and payments with a random developer
        foreach ($clients->take(3) as $client) {
            $projectCount = rand(3, 5);
            $projects = [];

            for ($i = 1; $i <= $projectCount; $i++) {
                $projects[] = Project::create([
                    'user_id' => $client->id,
                    'title' => $client->name . ' Project #' . $i,
                    'description' => 'Autogenerated project for ' . $client->name . ' (Project #' . $i . ').',
                    'category' => 'Web Development',
                    'budget' => rand(200, 5000),
                    'duration' => rand(1,12) . ' weeks',
                    'skills' => 'PHP, Laravel, Tailwind',
                    'status' => $statuses[array_rand($statuses)],
                ]);
            }

            $dev = $developers->random();

            foreach ($projects as $project) {
                if (!in_array($project->status, ['completed', 'in_progress'])) {
                    continue;
                }

                $amount = (float) $project->budget;
                $paidAt = Carbon::now()->subDays(rand(1, 30));

                Payment::create([
                    'project_id' => $project->id,
                    'client_id' => $client->id,
                    'developer_id' => $dev->id,
                    'amount' => $amount,
                    'payment_method' => rand(0,1) ? 'stripe' : 'paypal',
                    'transaction_id' => 'TX-' . Str::upper(Str::random(10)),
                    'status' => 'completed',
                    'payment_details' => [
                        'note' => 'Test payment',
                    ],
                    'paid_at' => $paidAt,
                ]);
            }

            // Add one pending payment for variety
            if (!empty($projects)) {
                $project = $projects[0];
                Payment::create([
                    'project_id' => $project->id,
                    'client_id' => $client->id,
                    'developer_id' => $dev->id,
                    'amount' => rand(50, 500),
                    'payment_method' => 'paypal',
                    'transaction_id' => 'TX-' . Str::upper(Str::random(10)),
                    'status' => 'pending',
                    'payment_details' => [ 'note' => 'Pending authorization' ],
                    'paid_at' => null,
                ]);
            }
        }

        $this->command?->info('Test data seeded for existing Clients and Developers.');
    }
}
